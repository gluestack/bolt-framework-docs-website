{"versions":[{"version":"0.1.x","pages":[{"type":"heading","title":"Overview","pages":[{"title":"Introduction","pages":[],"id":"/docs/overview/introduction","metaData":{"title":"Introduction | gluestack-style","description":"gluestack-style is a performant styling library for React & React Native that enables developers to write maintainable and scalable styles in a fast and efficient manner."},"h1Tags":["Introduction"],"h2Tags":["Why we built gluestack-style?","But arenâ€™t React Native and React Native Web sufficient?","Why Use gluestack-style, When We Already Have NativeBase?","Goals","Non goals","Future Considerations:","Notes to Keep in Mind:"]},{"title":"Performance","pages":[],"id":"/docs/overview/performance","metaData":{"title":"Performance | gluestack-style","description":"Know about how performant is gluestack-style. It uses a babel plugin for pre-computing styles during the build process, and runtime performance optimizations."},"h1Tags":["Performance"],"h2Tags":null},{"title":"API","pages":[],"id":"/docs/overview/api","metaData":{"title":"API | API's in gluestack-style","description":"A brief about all the API that you get from gluestack-style. With our styled function, you can easily extend existing components and make them customizable and themeable."},"h1Tags":["API"],"h2Tags":["styled()","componentConfig","extenedBaseConfig","StyledProvider","propertyResolver","mediaQueries","Platform","states","colorMode","sx","Utility Props"]}]},{"type":"heading","title":"Getting Started","pages":[{"title":"Installation","pages":[],"id":"/docs/getting-started/installation","metaData":{"title":"Installation | gluestack-style","description":"A Quick Installation guide for gluestack-style. To get started with gluestack-style, you'll need to install it using either npm or yarn."},"h1Tags":["Installation"],"h2Tags":["Summary"]},{"title":"Install in Expo","pages":[],"id":"/docs/getting-started/install-expo","metaData":{"title":"Installation | gluestack-style","description":"A Quick Installation guide for gluestack-style. To get started with gluestack-style, you'll need to install it using either npm or yarn."},"h1Tags":["Install in Expo project"],"h2Tags":["Installation","Setup Config","Setup StyledProvider","Babel Plugin (Optional)","That's it ðŸŽ‰"]},{"title":"Install in Next.js","pages":[],"id":"/docs/getting-started/install-nextjs","metaData":{"title":"Installation | gluestack-style","description":"A Quick Installation guide for gluestack-style. To get started with gluestack-style, you'll need to install it using either npm or yarn."},"h1Tags":["Install in Next.js project"],"h2Tags":["Installation","Setup Config","Setup StyledProvider","Setup next.config.js","Server-side Rendering","Babel Plugin (Optional)","That's it ðŸŽ‰"]},{"title":"styled()","pages":[],"id":"/docs/getting-started/styled","metaData":{"title":"styled - Extend existing components | gluestack-style","description":"With styled, you can easily extend existing components and make them customizable and themeable. gluestack-style has provided styled function for this."},"h1Tags":["styled()"],"h2Tags":["Configure styled","API","Features:"]},{"title":"StyledProvider","pages":[],"id":"/docs/getting-started/styled-provider","metaData":{"title":"StyledProvider | gluestack-style","description":"gluestack-style Style exports a StyledProvider component, a higher-order component that wraps your entire application and provides the library's configuration options."},"h1Tags":["StyledProvider"],"h2Tags":null},{"title":"TypeScript","pages":[],"id":"/docs/getting-started/type-script","metaData":{"title":"TypeScript | gluestack-style","description":"Learn how to use TypeScript for defining aliases and tokens in design systems. Achieve consistency in UI building using design tokens."},"h1Tags":["TypeScript"],"h2Tags":null}]},{"type":"heading","title":"api","pages":[{"title":"State Based Styles","pages":[],"id":"/docs/api/state-bases-styles","metaData":{"title":"State based styling | gluestack-style","description":"This allows you to create dynamic and interactive styles that change based on user interactions or other events."},"h1Tags":["State Based Styles"],"h2Tags":null},{"title":"ColorMode Based Styles","pages":[],"id":"/docs/api/color-mode-based-styles","metaData":{"title":"ColorMode Based Styles | gluestack-style","description":"A guide for color mode dependent styles inside the component config. Inside the **`_light`** or **`_dark`** key, you can define your styling."},"h1Tags":["ColorMode Based Styles"],"h2Tags":null},{"title":"Platform Based Styles","pages":[],"id":"/docs/api/platform-based-styles","metaData":{"title":"Platform Based Styles | gluestack-style","description":"Writing platform based styles in gluestack-style. This allows you to easily create styles that are specific to a particular platform that is, Web, iOS, or Android."},"h1Tags":["Platform Based Styles"],"h2Tags":null},{"title":"Responsive Styles","pages":[],"id":"/docs/api/responsive-styles","metaData":{"title":"Responsive Styles | gluestack-style","description":"gluestack-style supports responsive styles using media queries. You can define your breakpoints and other configuration options.","canonical":"https://style.gluestack.io/"},"h1Tags":["Responsive Styles"],"h2Tags":["Configure Your breakpoints"]},{"title":"Descendants Styles","pages":[],"id":"/docs/api/descendants-styles","metaData":{"title":"Descendant Styling | gluestack-style","description":"A guide on how to style the descendants of a component. With this, you can define styles that are passed down to children."},"h1Tags":["Descendant Styles (Context based)"],"h2Tags":null},{"title":"Variants","pages":[],"id":"/docs/api/variants","metaData":{"title":"Variants | gluestack-style","description":"gluestack-style allows you to easily create different variations of a component with different styles for more flexibility and reusability of components."},"h1Tags":["Variants"],"h2Tags":null},{"title":"Overriding Styles (sx)","pages":[],"id":"/docs/api/overriding-styles","metaData":{"title":"Overriding styles with sx | gluestack-style","description":"The sx prop allows you to pass an object that supports tokens, media-queries, nesting and token-aware values to the component."},"h1Tags":["Overriding Styles (sx)"],"h2Tags":null},{"title":"Overriding Styles (Utility Props)","pages":[],"id":"/docs/api/utility-props","metaData":{"title":"Utility Props | gluestack-style","description":"Writing inline styles with Utlity Props. We provide you the ability to pass down utility props on any Styled Component which internally converts to `sx` prop."},"h1Tags":["Overriding Styles (Utility Props)"],"h2Tags":null},{"title":"Property Resolver","pages":[],"id":"/docs/api/property-resolver","metaData":{"title":"Property Resolver | gluestack-style","description":"gluestack-style allows you to modify the resolution of value of any style property that you pass by providing a callback function against any style property."},"h1Tags":["Property Resolver"],"h2Tags":["Resolving Props with Property Resolver (Experimental)"]},{"title":"createStyled()","pages":[],"id":"/docs/api/create-styled","metaData":{"title":"createStyled | gluestack-style","description":"Create custom styled components with createStyled function and plugins. Example usage with CustomPlugin and AnimationPlugin."},"h1Tags":["createStyled()"],"h2Tags":null},{"title":"Props Passing","pages":[],"id":"/docs/api/props-passing","metaData":{"title":"Props Passing | gluestack-style","description":"gluestack-style allows you to pass properties to your styled component directly from the style configuration, also known as the component theme."},"h1Tags":["Props Passing"],"h2Tags":["Example"]},{"title":"Utility Functions","pages":[],"id":"/docs/api/utility-functions","metaData":{"title":"Utility Functions | gluestack-style","description":"Create global CSS styles easily with createGlobalStylesWeb function, supporting aliases and tokens for easy integration. Only for web, with some limitations.","canonical":"https://style.gluestack.io/"},"h1Tags":["Utility Functions"],"h2Tags":["createGlobalStylesWeb()"]},{"title":"AsForwarder","pages":[],"id":"/docs/api/as-forwarder","metaData":{"title":"AsForwarder | gluestack-style","description":"gluestack-style Style exports a AsForwarder component that can be used to configure the library."},"h1Tags":["AsForwarder"],"h2Tags":null}]},{"type":"heading","title":"plugins","pages":[{"title":"Intro to Plugins","pages":[],"id":"/docs/plugins/introduction","metaData":{"title":"Intro to Plugins | gluestack-style","description":"gluestack-style provides a plugin system to extend existing functionality of styled function. It's a great way to add support for new aliases, tokens and beyond.","canonical":"https://style.gluestack.io/"},"h1Tags":["Intro to Plugins"],"h2Tags":null},{"title":"Fonts Plugin","pages":[],"id":"/docs/plugins/fonts-plugin","metaData":{"title":"Fonts Plugin | gluestack-style","description":"gluestack-style provides a Plugin to unify font family styles across platforms.","canonical":"https://style.gluestack.io/"},"h1Tags":["Fonts Plugin"],"h2Tags":["Usage:","mapFonts:"]},{"title":"Animation Plugin","pages":[],"id":"/docs/plugins/animation-plugin","metaData":{"title":"Animation Plugin | gluestack-style","description":"Learn to add animation props with gluestack-styleâ€™s Animation Plugin for dynamic, animated UI elements. Performance impacts and lack of typings are limitations.","canonical":"https://style.gluestack.io/"},"h1Tags":["Animation Plugin"],"h2Tags":["Installation:","How to use:","Wrapper component for exit animation:","Limitations:"]},{"title":"CSS Variables Plugin","pages":[],"id":"/docs/plugins/cssvariables","metaData":{"title":"CSS Variables Plugin | gluestack-style","description":"gluestack-style provides a Plugin to inject all your tokens as CSS variables. An internal plugin to insert all theme tokens as css variables in your global styles.","canonical":"https://style.gluestack.io/"},"h1Tags":["CSS Variables Plugin"],"h2Tags":["Example:"]}]},{"type":"heading","title":"configuration","pages":[{"title":"Theme Tokens","pages":[],"id":"/docs/configuration/theme-tokens","metaData":{"title":"Theme Tokens | Theme tokens in gluestack-style","description":"gluestack-style uses tokens to store design-related values such as colors, typography, spacing, and more. They are a way of centralizing the values in a single location."},"h1Tags":["Theme Tokens"],"h2Tags":["Using tokens","Using Aliases","Property mapping"]},{"title":"Breakpoints","pages":[],"id":"/docs/configuration/breakpoints","metaData":{"title":"Breakpoints | gluestack-style","description":"How to create and use breakpoints in gluestack-style. You can define your breakpoints in `gluestack-style.config.js`. Breakpoints are defined in `mediaQueries` scale."},"h1Tags":["Configure your Breakpoints"],"h2Tags":null},{"title":"SSR","pages":[],"id":"/docs/configuration/ssr","metaData":{"title":"Server-Side Rendering | gluestack-style","description":"gluestack-style provides support for server-side rendering (SSR) by exporting a flush function to flush out any styles that were generated during the SSR process."},"h1Tags":["Server-Side Rendering"],"h2Tags":null}]},{"type":"heading","title":"advanced","pages":[{"title":"Architecture","pages":[],"id":"/docs/advanced/architecture","metaData":{"title":"Architecture | gluestack-style","description":"The architecture of gluestack-style is based on the concept of styled components, which enhances existing components to make them customizable and themeable."},"h1Tags":["Architecture"],"h2Tags":null},{"title":"Specificity","pages":[],"id":"/docs/advanced/specificity","metaData":{"title":"Specificity | gluestack-style","description":"Improve your CSS specificity with getWeightBaseOnPath function - calculate the precedence of different styles and easily override. Learn more here!"},"h1Tags":["Specificity"],"h2Tags":null},{"title":"Babel Plugins","pages":[],"id":"/docs/advanced/babel-plugins","metaData":{"title":"Babel Plugins | gluestack-style","description":"All the Babel plugins gluestack-style provides for its ecosystem. It transpiles your styled function calls and resolves the component styling in build time."},"h1Tags":["Babel plugins"],"h2Tags":["Installation Steps:","Advanced"]}]},{"type":"heading","title":"More","pages":[{"title":"Roadmap","pages":[],"id":"/docs/more/roadmap","metaData":{"title":"Roadmap | gluestack-style","description":"A quick look on gluestack-style roadmap."},"h1Tags":["Roadmap"],"h2Tags":["Triage","Todo","In Progress","Released"]},{"title":"Changelog","pages":[],"id":"/docs/more/changelog","metaData":{"title":"Changelog | gluestack-style","description":"A quick look on gluestack-style changelog."},"h1Tags":["Changelog"],"h2Tags":null}]}],"breadcrumbs":null}],"firstPage":"/docs/getting-started/installation"}